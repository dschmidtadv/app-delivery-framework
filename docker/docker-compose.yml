# Docker Compose Configuration for Local Development
# This file defines the complete local development environment
version: '3.8'

services:
  # Main Drupal application service
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: development
    container_name: app-delivery-app
    restart: unless-stopped
    volumes:
      - .:/var/www/html:cached
      - drupal_files:/var/www/html/sites/default/files
    ports:
      - "${LOCAL_PORT:-8080}:80"
    environment:
      - DRUPAL_ENV=development
      - PHP_MEMORY_LIMIT=512M
      - PHP_MAX_EXECUTION_TIME=300
    env_file:
      - .env.local
    depends_on:
      mariadb:
        condition: service_healthy
      valkey:
        condition: service_healthy
      localstack:
        condition: service_started
    networks:
      - app-delivery-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MariaDB database (matches Aurora MySQL in AWS)
  mariadb:
    image: mariadb:11.0
    container_name: app-delivery-mariadb
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: app_delivery_dev
      MYSQL_USER: drupal
      MYSQL_PASSWORD: password
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mariadb_data:/var/lib/mysql
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./scripts/seed-data.sql:/docker-entrypoint-initdb.d/02-seed.sql
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-delivery-network
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --max-connections=200
      --general-log=1
      --general-log-file=/var/lib/mysql/general.log

  # Valkey cache (matches AWS ElastiCache for Valkey)
  valkey:
    image: valkey/valkey:7.2-alpine
    container_name: app-delivery-valkey
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - valkey_data:/data
      - ./docker/valkey.conf:/etc/valkey/valkey.conf
    command: valkey-server /etc/valkey/valkey.conf
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-delivery-network
    sysctls:
      - net.core.somaxconn=65535

  # LocalStack for AWS services simulation
  localstack:
    image: localstack/localstack:latest
    container_name: app-delivery-localstack
    restart: unless-stopped
    environment:
      - SERVICES=s3,secretsmanager,sts,iam,cloudwatch,logs,ecr
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - DOCKER_HOST=unix:///var/run/docker.sock
      - PERSISTENCE=1
      - LAMBDA_EXECUTOR=docker
      - START_WEB=1
    ports:
      - "4566:4566"      # LocalStack main endpoint
      - "4510-4559:4510-4559"  # External services port range
    volumes:
      - localstack_data:/tmp/localstack
      - /var/run/docker.sock:/var/run/docker.sock
      - ./scripts/localstack-init.sh:/etc/localstack/init/ready.d/init.sh
    networks:
      - app-delivery-network

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: app-delivery-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"     # SMTP server
      - "8025:8025"     # Web UI
    networks:
      - app-delivery-network

  # Jaeger for distributed tracing (optional)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: app-delivery-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"   # Jaeger UI
      - "14268:14268"   # HTTP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - app-delivery-network

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: app-delivery-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app-delivery-network

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: app-delivery-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - app-delivery-network

  # PgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: app-delivery-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@app-delivery.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json
    depends_on:
      - postgres
    networks:
      - app-delivery-network

  # Redis Commander for Redis management (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: app-delivery-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - app-delivery-network

# Named volumes for data persistence
volumes:
  mariadb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/.docker/mariadb
  valkey_data:
    driver: local
  localstack_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local
  drupal_files:
    driver: local

# Custom network for service communication
networks:
  app-delivery-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
    ipam:
      config:
        - subnet: 172.20.0.0/16
