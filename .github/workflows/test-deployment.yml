# Test Deployment Workflow
# Uses the GitHub secrets we configured with Terraform
name: Test Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'

env:
  AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REGISTRY }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER_NAME }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE_NAME }}

permissions:
  contents: read

jobs:
  # Test AWS credentials and list resources
  test-aws-connection:
    name: Test AWS Connection
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Test AWS CLI access
        run: |
          echo "Testing AWS CLI access..."
          aws sts get-caller-identity
          echo "✅ AWS credentials working!"

      - name: Check ECR repository
        run: |
          echo "Checking ECR repository..."
          aws ecr describe-repositories --repository-names $(echo $ECR_REPOSITORY | cut -d'/' -f2) || echo "⚠️ ECR repository not found - this is expected for initial setup"

      - name: Check ECS cluster
        run: |
          echo "Checking ECS cluster..."
          aws ecs describe-clusters --clusters $ECS_CLUSTER || echo "⚠️ ECS cluster not found - this is expected for initial setup"

      - name: Check RDS endpoint
        run: |
          echo "Testing RDS connectivity..."
          echo "RDS Endpoint: ${{ secrets.RDS_ENDPOINT }}"
          # Test if the endpoint resolves (without connecting to avoid authentication)
          nslookup $(echo "${{ secrets.RDS_ENDPOINT }}" | cut -d':' -f1) || echo "⚠️ RDS endpoint not resolvable - this is expected for initial setup"

      - name: Display environment info
        run: |
          echo "🚀 Deployment Environment: ${{ github.event.inputs.environment || 'staging' }}"
          echo "🌍 AWS Region: $AWS_REGION"
          echo "🐳 ECR Registry: $ECR_REPOSITORY"
          echo "⚙️ ECS Cluster: $ECS_CLUSTER"
          echo "🔧 ECS Service: $ECS_SERVICE"
          echo "💾 Cache Endpoint: ${{ secrets.CACHE_ENDPOINT }}"

  # Build Docker image (if infrastructure exists)
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test-aws-connection
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          # Try to login to ECR, create repository if it doesn't exist
          echo "Attempting ECR login..."
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $(echo $ECR_REPOSITORY | cut -d'/' -f1)
          
          # Extract repository name from registry URL
          REPO_NAME=$(echo $ECR_REPOSITORY | cut -d'/' -f2)
          echo "Repository name: $REPO_NAME"
          
          # Check if repository exists, create if not
          if ! aws ecr describe-repositories --repository-names $REPO_NAME >/dev/null 2>&1; then
            echo "Creating ECR repository: $REPO_NAME"
            aws ecr create-repository --repository-name $REPO_NAME
          fi
          
          echo "✅ ECR ready for image push"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          # Build the Docker image
          IMAGE_TAG="test-$(git rev-parse --short HEAD)-$(date +%s)"
          FULL_IMAGE_URI="$ECR_REPOSITORY:$IMAGE_TAG"
          
          echo "Building image: $FULL_IMAGE_URI"
          
          # First check if we have a Dockerfile
          if [ ! -f "docker/Dockerfile" ] && [ ! -f "Dockerfile" ]; then
            echo "❌ No Dockerfile found! Creating a simple test Dockerfile..."
            mkdir -p docker
            cat > docker/Dockerfile << 'EOF'
          FROM nginx:alpine
          COPY . /usr/share/nginx/html/
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]
          EOF
          fi
          
          # Use the dockerfile that exists
          DOCKERFILE_PATH="docker/Dockerfile"
          if [ ! -f "$DOCKERFILE_PATH" ]; then
            DOCKERFILE_PATH="Dockerfile"
          fi
          
          docker build -f $DOCKERFILE_PATH -t $FULL_IMAGE_URI .
          
          echo "Pushing image to ECR..."
          docker push $FULL_IMAGE_URI
          
          echo "✅ Image built and pushed successfully!"
          echo "📦 Image URI: $FULL_IMAGE_URI"

  # Deployment summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [test-aws-connection, build-image]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "## 🚀 Test Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "**AWS Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.test-aws-connection.result }}" == "success" ]; then
            echo "✅ **AWS Connection:** Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **AWS Connection:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build-image.result }}" == "success" ]; then
            echo "✅ **Docker Build:** Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Docker Build:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Set up AWS infrastructure (ECS cluster, RDS, etc.)" >> $GITHUB_STEP_SUMMARY
          echo "- Configure proper ECS service deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Add health checks and monitoring" >> $GITHUB_STEP_SUMMARY
